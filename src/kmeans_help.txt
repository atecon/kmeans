This package includes functionalities to identify unknown clusters of multidimensional data using the well known (at least in the machine-learning field) kmeans algorithm.

The kmeans algorithm divides a set of N samples X into k disjoint clusters C, each described by the mean of the samples in the cluster. The means are called the cluster "centroids".

The objective is to minimize some loss. For instance, the objective is to minimize "inertia", or within-cluster sum-of-squares criterion in case of the Euclidean distance function.

For more information see:
https://scikit-learn.org/stable/modules/clustering.html#kmeans

Please ask questions and report bugs on the gretl mailing list if possible. Alternatively, create an issue ticket on the github repo (see below).
Source code and test script(s) can be found here:
https://github.com/atecon/kmeans



PUBLIC FUNCTIONS:

-----------------------------------------------------------------------
Function:       kmeans_fit (const list xlist, const int n_clusters[2::2],
                            bundle opts[null])

Description:    Execute the kmeans algorithm and estimate the clusters.

Arguments:
xlist:          list, Features (regressors) to train the model.
n_clusters:     int, Number of assumed clusters (default: 2)
opts:           bundle, Optional parameters affecting the kmeans algorithm. You
                can pass the following parameters:

                distance_type: str, Name of the distance metric applied
                               (default: "euclidean"). For more distance
                               metrics, see gretl's built-in function
                               distance().
                verbose:     int, Print details (0: don't print anything,
                             1: print details (default))
                initializer: str, Method for initialization. Currently only
                             "random" is supported (choose n_clusters
                             observations (rows) at random from data for the
                             initial centroids)
                n_draws:     int, Number of time the kmeans algorithm will be
                             run with different centroid seeds. The final
                             results will be the best output of n_draws
                             consecutive runs in terms of inertia.
                max_iter:    int, Maximum number of iterations of the kmeans
                             algorithm to run.
                algorithm:   str, kmeans algorithm to use. Currently only
                             "full" is supported (classical EM-style algorithm).


Return:
Bundle holding various items:
  distance_metric:            scalar, Estimated "inertia".
  error:                      int, Error code (0: no error)
  cluster_id:                 series, Estimated cluster ID for each observation
                              for the best draw minimizing "inertia".
  distances:                  series, Estimated distance for the best draw
                              minimizing "inertia".
  centroids:                  matrix, Estimated mean values (centroids) for
                              each feature (columns) and for each clusters
                              (rows).
  use_circles:                bool, Plot circles instead of point when calling
                              the kmeans_plot() function.
  pointsize:                  scalar, Size of points being plotted when calling
                              the kmeans_plot() function.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
Function:       kmeans_predict (const list xlist, const bundle Model)

Description:    Predict cluster belonging based on the estimated model.

Arguments:
xlist:          list, Features (regressors) used for predicting cluster
                belonging.
Model:          bundle, Bundle returned by the kmeans_fit() function.

Return:
Series holding the predicted cluster ID for each observation.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
Function:       kmeans_summary (const bundle Model)

Description:    Print summarizing information on estimation step after having
                applied the kmeans_fit() function.

Arguments:
Model:          bundle, Bundle returned by the kmeans_fit() function.

Return:
Nothing.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
Function:       kmeans_plot (const list xlist, const bundle self[null])

Description:    Factorized scatter plot estimated clusters for each
                2-dimensional combination of features. This function calls the
                user-defined package "PairPlot" which must be installed.

Arguments:
xlist:          list, Features (regressors) used for plotting.
self:           bundle, Bundle for manipulating the plot. Currently you can
                pass.
                filename:     str, Full path + filename for storing the plot
                              (default: "display" shows the plot immediately
                              on screen).
                use_circles:  bool, Plot circles instead of points (default:
                              TRUE)
                pointsize:    scalar, Size of points being plotted
                              (default: 1.0).

Return:
Nothing.
-----------------------------------------------------------------------


Changelog:
- v0.1, November 2021
    + initial release
