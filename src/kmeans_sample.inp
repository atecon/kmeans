clear
set verbose off
set seed 34
include kmeans.gfn

# Select an example to run
EXAMPLE = 1

if EXAMPLE == 1
    open mccullagh.gdt --quiet

    Type[1] = NA  # add missing value entry just for testing purpose
    list x = Months Acc Type
    n_clusters = 2

elif EXAMPLE == 2
    open credscore.gdt --quiet
    list x = Age Income Avgexp
    scalar n_clusters = 3

elif EXAMPLE == 3
    # NOTE: You need to install the "PairPlot" package first
    open iris.gdt --frompkg=PairPlot --quiet
    list x = 1..4
    scalar n_clusters = 3
elif EXAMPLE == 4
    open denmark --quiet
    list x = LRM LRY
    x = diff(x)
    n_clusters = 2
endif

smpl x --no-missing

# Euclidean distance (default)
# ============================
bundle Model = kmeans_fit(x, n_clusters)
print Model
kmeans_summary(Model)  # Print summary of estimation

print Model.centroids                   # print centroids
# Retrieve cluster_id for valid observations
series cluster_id = Model.cluster_id
# Look for eventual gaps for observations for which some of the input variables
# are missing
smpl full
print cluster_id -o


# Predict
smpl x --no-missing
series fc_cluster = kmeans_predict(x, Model)  # predict cluster belonging
series cluster_id = Model.cluster_id          # must equal "fc_cluster"
series distances = Model.distances
print distances cluster_id fc_cluster -o --range=1:15

# Plot distinct clusters for each variable combination in 2D
kmeans_plot(x, Model)


/* You can also manipulate the plot if wanted:
Model.use_circles = TRUE
Model.pointsize = 0.25
Model.filename = "foo2.png"     # pass filename for storing plot
kmeans_plot(x, Model)
*/


# Manhattan distance
# ==================
# Pass some user-defined parameter values, too
bundle opt = _(max_iter = 100, n_draws = 10, distance_type = "manhattan")
bundle Model = kmeans_fit(x, 2, opt)
print Model

# Plot distinct clusters and tweak the plot
scalar Model.transparency_level = 180  # this is an option supported by PairPlot
kmeans_plot(x, Model)


/*
# Determine the optimal number of cluster by means of a screeplot
# ===============================================================
scalar max_clusters = 5
matrix inertia = seq(2, max_clusters)' ~ mshape(NA, max_clusters - 1, 1)
cnameset(inertia, "n_clusters inertia")

loop i=2..max_clusters
    bundle Model = kmeans_fit(x, $i)
    inertia[i-1, 2] = Model.within_variation_total
endloop

gnuplot 2 1 --matrix=inertia --with-lines --output=display \
    {set title 'Scree plot showing inertia as a function of no. of clusters'; }
*/

