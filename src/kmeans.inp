function bundle set_bundle_and_get_defaults (const list xlist,
                                             bundle opts[null])
    /* Compile self bundle by merging eventual information
    from 'opts' bundle. */

    if !exists(opts)
        bundle opts = null
    endif

    bundle self = default_values(xlist)
    self = opts + self          # override defaults

    return self
end function


function bundle default_values (const list xlist)
    /* Set default values. */

    bundle self = null
    scalar self.error = FALSE
    scalar self.verbose = 1
    string self.initializer = "random"
    scalar self.n_initial_draws = 10
    scalar self.max_iter = 300
    scalar self.tolerance = 1e-4
    string self.algorithm = "full"
    string self.distance_type = "euclidean"

    return self
end function


function matrix initialize_clusters (const bundle self)
    /* Randomly assign observations to some initial cluster.
    return: series, Randomly assign 1 to n_cluster ID for each observation. */

    if self.initializer == "random"
        return mrandgen(i, 1, self.n_clusters, $nobs, 1)
    else
        funcerr "Initializer is not supported."
    endif
end function


function series kmeans_predict (const list xlist "Features",
                                const bundle Model)
    /* Predict cluster belonging for a given model.
    return: Series with predicted cluster belongings. */

    errorif(sum(missing(xlist)), "Some features have missing values. Please drop these first.")

    matrix distances = distances({xlist}, Model.centroids, Model.distance_type)
    series cluster_id = iminr(distances)

    return cluster_id
end function


function bundle kmeans_fit (const list xlist "Features",
                            const int n_clusters[2::2] "No. of clusters",
                            bundle opts[null] "Parameter bundle")
    /* Estimate clusters. */

    if !exists(opts)
        bundle opts = null
    endif

    errorif(sum(missing(xlist)), "Some features have missing values. Please drop these first.")

    bundle self = set_bundle_and_get_defaults(xlist, opts)
    self.distance_type = tolower(self.distance_type)
    self.initializer = tolower(self.initializer)
    self.algorithm = tolower(self.algorithm)

    scalar self.n_clusters = n_clusters
    matrix features = {xlist}

    self.distances_metric = $huge
    scalar draw_id = 1

    loop self.n_initial_draws  # evaluate several initial random draws of clusters
        # TODO: Gets not printed, yet
        if self.verbose
            Info(sprintf("Start the %d-th random draw of clusters.", draw_id))
            flush
        endif

        bundle Tmp = compute_kmeans(self, features)

        if Tmp.distances_metric < self.distances_metric # select minimizing draw
            scalar self.distances_metric = Tmp.distances_metric
            matrix self.centroids = Tmp.centroids
            matrix cluster_id = Tmp.cluster_id
            matrix distances = Tmp.distances
        endif

        draw_id++
    endloop

    cnameset(self.centroids, varnames(xlist))
    series self.cluster_id = cluster_id
    series self.distances = distances

    return self
end function


function bundle compute_kmeans (const bundle self, const matrix features)
    /* Actual computation of kmeans. Identify clusters.
    return: bundle, output for a given random draw of cluster association. */

    bundle Model
    matrix cluster_id = initialize_clusters(self)
    scalar n_clusters = rows(values(cluster_id))
    scalar iter = 1
    matrix distances = mshape($huge, rows(features), n_clusters)

    loop while iter <= self.max_iter
        matrix centroids = centroids(features, cluster_id)
        matrix distances_new = distances(features, centroids, self.distance_type)
        matrix cluster_id_new = iminr(distances_new)

        if rows(values(cluster_id_new)) == n_clusters  # check + update
            matrix centroids = centroids(features, cluster_id_new)
            cluster_id = cluster_id_new
            matrix distances = distances_new

            iter++
        else
            Warn(sprintf("Some assumed cluster has no observations. Stop searching after %d iterations.", iter))
            break
        endif
    endloop

    # Compute final distances TODO: (really needed?)
    #matrix distances = distances(features, centroids[,2:], self.distance_type)
    matrix Model.distances = minr(distances)   # select minimum from all clusters for each obs.
    scalar Model.distances_metric = sum_avg_squared_distance(distances, cluster_id)
    matrix Model.cluster_id = cluster_id
    matrix Model.centroids = centroids

    return Model
end function


function scalar sum_avg_squared_distance (const matrix distances,
                                          const matrix cluster_id)
    /* Compute the sum of the average squared distances across all clusters. */

    scalar n_clusters = max(cluster_id)
    scalar metric = 0

    loop i=1..n_clusters
        matrix mask = (cluster_id .= $i)
        scalar n = sum(mask)

        metric += sum(selifr(distances, mask)) * (1 / n)
    endloop

    return metric
end function


function matrix distances (const matrix features,
                           const matrix centroids,
                           const string distance_type)
    /* Call function for computing distances between multi-dimensional points.
    return: type, description */

    if distance_type == "euclidean"
        matrix dist = distance_euclidean(features, centroids)
    elif distance_type == "manhattan"
        matrix dist = distance_manhattan(features, centroids)
    else
        funcerr(sprintf("Distance type '%s' not supported.", distance_type))
    endif

    return dist
end function


function matrix centroids (const matrix features,
                           const matrix cluster_id)
    /* Compute centroids (means) for each cluster.
    return: "n_clusters by 1+cols(features)" matrix, The i-th row corresponds to the i-th cluster; each column refers to the centroid (mean) value for each respective feature. */

    scalar n_clusters = max(cluster_id)
    matrix centroids = mshape(NA, n_clusters, cols(features))
    strings row_labels = array(n_clusters)

    loop i=1..n_clusters
        matrix mask = (cluster_id .= $i)
        centroids[i,] = meanc(selifr(features, mask))
        row_labels[i] = sprintf("Centroid=%d", $i)
    endloop

    rnameset(centroids, row_labels)

    return centroids
end function


